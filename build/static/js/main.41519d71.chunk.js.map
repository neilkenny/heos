{"version":3,"sources":["socket.js","components/VolumeSlider.js","redux/player/playerActions.js","components/PlayerList.js","components/PlayerListContainer.js","redux/player/playerTypes.js","redux/track/trackActions.js","components/SongDetails.js","components/SongDetailsContainer.js","redux/track/trackTypes.js","redux/playState/playStateActions.js","components/PlayerControlsContainer.js","redux/playState/playStateTypes.js","components/VolumeControlsContainer.js","redux/group/groupActions.js","components/GroupList.js","redux/group/groupTypes.js","components/GroupListContainer.js","components/LeftPane.js","components/AlbumArtContainer.js","components/RightPane.js","components/SongProgressContainer.js","redux/progress/progressActions.js","redux/progress/progressTypes.js","App.js","redux/player/playerReducers.js","redux/track/trackReducers.js","redux/progress/progressReducers.js","redux/playState/playStateReducers.js","redux/group/groupReducers.js","redux/rootReducer.js","redux/store.js","index.js","events.js"],"names":["socket","Handle","Slider","wrapperStyle","width","margin","handle","props","value","dragging","index","restProps","prefixCls","overlay","visible","placement","key","VolumeSlider","state","handleChange","bind","onVolumeChanged","style","min","max","defaultValue","this","currentVolume","sliderPosition","onChange","onAfterChange","element","ReactDOM","findDOMNode","addEventListener","isMouseDown","level","volumeChanged","setState","prevState","Component","connect","getSocket","io","PlayerList","players","length","sort","a","b","name","map","player","ip","model","volume","pid","playerId","setVolume","dispatch","emit","events","SET_VOLUME","setPlayerVolume","PlayerListContainer","onPlayersReceived","newDeviceList","fetchPlayersResponse","onPlayerVolumeChanged","on","GET_PLAYERS_RESPONSE","PLAYER_VOLUME_CHANGED","requestPlayers","playerVolumeChanged","type","waitingForPlayers","GET_PLAYERS_REQUEST","deviceList","payload","SongDetails","className","id","song","album","artist","SongDetailsContainer","onTrackDetailsReceieved","trackDetails","getCurrentTrackResponse","CURRENT_TRACK_DETAILS","getNowPlaying","track","nowPlaying","ownProps","GET_NOW_PLAYING","PlayerControlsContainer","nextTrack","previousTrack","togglePlayPause","onPlayStateChanged","onPlayStateResponse","PLAY_STATE_RESPONSE","PLAY_STATE_CHANGED","requestPlayState","onClick","playState","PLAY_STATE_REQUEST","playStateChanged","playStateResponse","TOGGLE_PLAY_PAUSE","NEXT_TRACK_REQUEST","PREVIOUS_TRACK_REQUEST","VolumeControlsContainer","volumeUp","alert","volumeDown","GroupList","console","log","groups","group","gid","onGroupVolumeChanged","groupId","setGroupVolume","SET_GROUP_VOLUME","GroupListContainer","onGroupsReceived","getGroupsResponse","GET_GROUPS_RESPONSE","getGroups","groupVolumeChanged","GET_GROUPS_REQUEST","LeftPaneComponent","AlbumArtContainer","src","albumArtUrl","image_url","RightPaneComponent","SongProgressContainer","onSongProgressUpdated","startProgressBar","stopProgressBar","songPosition","undefined","PROGRESS_UPDATE","progress","duration","isPlaying","clearInterval","intervalSubscription","me","setInterval","event","lastRefreshed","Date","updateProgress","lastAccurateUpdate","cur_pos","songProgressUpdate","AppComponent","initialState","rootReducer","combineReducers","action","find","splice","indexOf","store","createStore","applyMiddleware","logger","thunk","render","App","document","getElementById","module","exports","NEW_DEVICE_DISCOVERED","GET_PLAYERS","SUCCESSFUL_CONNECTION","TRACK_CHANGED","GET_VOLUME"],"mappings":"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","file":"static/js/main.41519d71.chunk.js","sourcesContent":["import io from 'socket.io-client';\r\n\r\nlet socket;\r\n\r\nexport const getSocket = () => {\r\n  if(!socket){\r\n    socket = io();\r\n  }\r\n  return socket;\r\n}","import React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { connect } from 'react-redux';\r\nimport 'rc-slider/assets/index.css';\r\nimport 'rc-tooltip/assets/bootstrap.css';\r\nimport Slider from 'rc-slider';\r\nimport Tooltip from 'rc-tooltip';\r\n\r\nconst Handle = Slider.Handle;\r\nconst wrapperStyle = { width: '80%', margin: 10 };\r\n\r\nconst handle = (props) => {\r\n  const { value, dragging, index, ...restProps } = props;\r\n  return (\r\n    <Tooltip\r\n      prefixCls=\"rc-slider-tooltip\"\r\n      overlay={value}\r\n      visible={dragging}\r\n      placement=\"top\"\r\n      key={index}\r\n    >\r\n      <Handle value={value} {...restProps} />\r\n    </Tooltip>\r\n  );\r\n};\r\n\r\nclass VolumeSlider extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {};\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.onVolumeChanged = this.onVolumeChanged.bind(this);\r\n  }\r\n\r\n  static isMouseDown;\r\n\r\n  /**\r\n   * Update the slider position to match the volume, but not if we\r\n   * are dragging the slider. This allows us to update the slider when\r\n   * the volume is changed externally, but also to drag the slider and not\r\n   * do the volume update until the user lets go of the mouse\r\n   * @param {*} props \r\n   */\r\n  static getDerivedStateFromProps(props, prevState){\r\n    if(!VolumeSlider.isMouseDown){\r\n      return { sliderPosition: props.currentVolume }  \r\n    }else{\r\n      return { sliderPosition: prevState.sliderPosition}\r\n    }\r\n  }\r\n\r\n  /**\r\n   * \r\n   */\r\n  render(){\r\n    return (\r\n    <div style={wrapperStyle}>\r\n      <Slider min={0} max={100} defaultValue={this.props.currentVolume} value={this.state.sliderPosition} handle={handle} onChange={this.handleChange} onAfterChange={this.onVolumeChanged} />\r\n    </div>\r\n    )\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.element = ReactDOM.findDOMNode(this);\r\n    this.element.addEventListener('mousedown', () => {\r\n      VolumeSlider.isMouseDown = true;\r\n    });\r\n\r\n    this.element.addEventListener('mouseup', () => {\r\n      VolumeSlider.isMouseDown = false;\r\n    });\r\n    \r\n  }\r\n\r\n  onVolumeChanged(level){\r\n    if(this.props.volumeChanged){\r\n      this.props.volumeChanged(level);\r\n    }\r\n  }\r\n\r\n  handleChange(level){\r\n    this.setState({sliderPosition: level});\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {};\r\n}\r\n\r\n\r\n\r\nexport default connect(mapStateToProps)(VolumeSlider);","import events from '../../events';\r\nimport { getSocket } from '../../socket';\r\nimport { \r\n  GET_PLAYERS_REQUEST, \r\n  GET_PLAYERS_RESPONSE, \r\n  SET_PLAYER_VOLUME_REQUEST, \r\n  PLAYER_VOLUME_CHANGED \r\n} from './playerTypes';\r\n\r\n\r\nconst socket = getSocket();\r\n\r\nexport const fetchPlayersRequest = () => {\r\n  return {\r\n    type: GET_PLAYERS_REQUEST,\r\n    waitingForPlayers: true\r\n  };\r\n};\r\n\r\nexport const fetchPlayersResponse = (device) => {\r\n  return {\r\n    type: GET_PLAYERS_RESPONSE,\r\n    payload: device\r\n  }  \r\n};\r\n\r\nexport const setPlayerVolumeRequest = (playerId, level) => {\r\n  return {\r\n    type: SET_PLAYER_VOLUME_REQUEST,\r\n    payload: { playerId, level }\r\n  }\r\n};\r\n\r\nexport const playerVolumeChanged = (playerId, level) => {\r\n  return {\r\n    type: PLAYER_VOLUME_CHANGED,\r\n    payload: { playerId, level }\r\n  }\r\n}\r\n\r\nexport const requestPlayers = () => {\r\n  \r\n  return (dispatch) => {\r\n    dispatch(fetchPlayersRequest());\r\n    socket.emit(events.GET_PLAYERS_REQUEST);\r\n  }\r\n};\r\n\r\nexport const setPlayerVolume = (playerId, level) => {\r\n  return (dispatch) => {\r\n    if(level <= 20){\r\n      setPlayerVolumeRequest(playerId, level);\r\n      socket.emit(events.SET_VOLUME, playerId, level);\r\n    }\r\n    \r\n  }\r\n}","import React, { Component } from 'react';\r\nimport VolumeSlider from './VolumeSlider';\r\nimport {connect } from 'react-redux';\r\nimport { setPlayerVolume } from '../redux/player/playerActions';\r\n\r\nexport class PlayerList extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.onVolumeChanged = this.onVolumeChanged.bind(this);\r\n  }\r\n\r\n  render(){\r\n    return !this.props.players.length ? <div>Searching for HEOS devices...</div> : (\r\n      <div>\r\n        {this.props.players.sort((a, b) => a.name > b.name ? 1 : -1).map((player) => {\r\n          return (\r\n            <div key={player.ip}>\r\n              <p>{player.name} - {player.model} ({player.ip})</p>\r\n              <VolumeSlider currentVolume={player.volume} volumeChanged={(level) => this.onVolumeChanged(player.pid, level)}></VolumeSlider>\r\n            </div>\r\n            )})\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n\r\n  onVolumeChanged(playerId, level){\r\n    this.props.setVolume(playerId, level);\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    setVolume: (playerId, level) => dispatch(setPlayerVolume(playerId, level))\r\n  };\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(PlayerList)","import React, { Component } from 'react';\r\nimport PlayerList from './PlayerList';\r\nimport { connect } from 'react-redux';\r\nimport { requestPlayers, fetchPlayersResponse, playerVolumeChanged } from '../redux/player/playerActions';\r\nimport { getSocket } from '../socket';\r\nimport events from '../events';\r\n\r\nconst socket = getSocket();\r\n\r\nclass PlayerListContainer extends Component {\r\n  constructor(props){\r\n    super(props);\r\n\r\n    this.onPlayersReceived = this.onPlayersReceived.bind(this);\r\n    this.onPlayerVolumeChanged = this.onPlayerVolumeChanged.bind(this);\r\n    \r\n    socket.on(events.GET_PLAYERS_RESPONSE, this.onPlayersReceived);\r\n    socket.on(events.PLAYER_VOLUME_CHANGED, this.onPlayerVolumeChanged);\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.props.requestPlayers();\r\n  }\r\n\r\n  render() {\r\n    return <PlayerList players={this.props.players}></PlayerList>\r\n  }\r\n\r\n  onPlayersReceived = (newDeviceList) => {\r\n    this.props.fetchPlayersResponse(newDeviceList);\r\n  }\r\n\r\n  onPlayerVolumeChanged(playerId, level) {\r\n    this.props.playerVolumeChanged(playerId, level);\r\n  }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    players: state.players\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  \r\n  return {\r\n    requestPlayers: () => dispatch(requestPlayers()),\r\n    fetchPlayersResponse: (deviceList) => dispatch(fetchPlayersResponse(deviceList)),\r\n    playerVolumeChanged: (playerId, level) => dispatch(playerVolumeChanged(playerId, level))\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PlayerListContainer);","export const GET_PLAYERS_REQUEST = 'GET_PLAYERS_REQUEST';\r\nexport const GET_PLAYERS_RESPONSE = 'GET_PLAYERS_RESPONSE';\r\nexport const SUCCESSFUL_CONNECTION = 'SUCCESSFUL_CONNECTION';\r\nexport const SET_PLAYER_VOLUME_REQUEST = 'SET_PLAYER_VOLUME_REQUEST';\r\nexport const PLAYER_VOLUME_CHANGED = 'PLAYER_VOLUME_CHANGED';","import { getSocket } from '../../socket';\r\nimport events from '../../events';\r\nimport { GET_NOW_PLAYING_REQUEST, GET_NOW_PLAYING_RESPONSE} from './trackTypes';\r\n\r\nconst socket = getSocket();\r\n\r\nexport const getNowPlayingRequest = () => {\r\n  return {\r\n    type: GET_NOW_PLAYING_REQUEST\r\n  }\r\n}\r\n\r\nexport const getCurrentTrackResponse = (trackInfo) => {\r\n  return {\r\n    type: GET_NOW_PLAYING_RESPONSE,\r\n    payload: trackInfo\r\n  }\r\n}\r\n\r\nexport const getNowPlaying = () => {\r\n  return (dispatch) => {\r\n    dispatch(getNowPlayingRequest());\r\n    socket.emit(events.GET_NOW_PLAYING);\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nclass SongDetails extends Component  {\r\n\r\n  constructor(props){\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n    <div className=\"song-details-container\">\r\n      <div className=\"song-data\"><div className=\"title\">Track:</div><div className=\"data\" id=\"track-title\">{this.props.song.song}</div></div>\r\n      <div className=\"song-data\"><div className=\"title\">Album:</div><div className=\"data\" id=\"track-album\">{this.props.song.album}</div></div>\r\n      <div className=\"song-data\"><div className=\"title\">Artist:</div><div className=\"data\" id=\"track-artist\">{this.props.song.artist}</div></div>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SongDetails;","import React, { Component } from 'react';\r\nimport { getNowPlaying, getCurrentTrackResponse } from \"../redux/track/trackActions\";\r\nimport events from '../events';\r\nimport { connect } from 'react-redux';\r\nimport { getSocket } from '../socket';\r\nimport SongDetails from './SongDetails';\r\n\r\nconst socket = getSocket();\r\n\r\nclass SongDetailsContainer extends Component {\r\n  \r\n  constructor(props){\r\n    super(props);\r\n    socket.on(events.CURRENT_TRACK_DETAILS, this.onTrackDetailsReceieved);\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.props.getNowPlaying();\r\n  }\r\n\r\n  render(){\r\n    return <SongDetails song={this.props.trackDetails}></SongDetails>\r\n  }\r\n\r\n  onTrackDetailsReceieved = (trackDetails) => {\r\n    this.props.getCurrentTrackResponse(trackDetails);\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    trackDetails: state.track.nowPlaying\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n  \r\n  return {\r\n    getNowPlaying: () => dispatch(getNowPlaying()),\r\n    getCurrentTrackResponse: (trackDetails) => dispatch(getCurrentTrackResponse(trackDetails))\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SongDetailsContainer);","export const TRACK_CHANGED_EVENT = 'TRACK_CHANGED_EVENT';\r\nexport const GET_NOW_PLAYING_REQUEST = 'GET_NOW_PLAYING_REQUEST';\r\nexport const GET_NOW_PLAYING_RESPONSE = 'GET_NOW_PLAYING_RESPONSE';","import { \r\n  PLAY_STATE_CHANGED, \r\n  PLAY_STATE_REQUEST, \r\n  PLAY_STATE_RESPONSE, \r\n  TOGGLE_PLAY_PAUSE_REQUEST,\r\n  NEXT_TRACK_REQUEST,\r\n  PREVIOUS_TRACK_REQUEST\r\n} from './playStateTypes';\r\n\r\nimport events from '../../events';\r\nimport {getSocket} from '../../socket';\r\n\r\nconst socket = getSocket();\r\n\r\nexport const playStateChanged = (playState) => {\r\n  return {\r\n    type: PLAY_STATE_CHANGED,\r\n    payload: playState\r\n  }\r\n}\r\n\r\nexport const playStateRequest = () => {\r\n  return {\r\n    type: PLAY_STATE_REQUEST\r\n  }\r\n}\r\n\r\nexport const playStateResponse = (playState) => {\r\n  return {\r\n    type: PLAY_STATE_RESPONSE,\r\n    payload: playState\r\n  }\r\n}\r\n\r\nexport const togglePlayPauseRequest = () => {\r\n  return {\r\n    type: TOGGLE_PLAY_PAUSE_REQUEST\r\n  }\r\n}\r\n\r\nexport const nextTrackRequest = () => {\r\n  return {\r\n    type: NEXT_TRACK_REQUEST\r\n  }\r\n}\r\n\r\nexport const previousTrackRequest = () => {\r\n  return {\r\n    type: PREVIOUS_TRACK_REQUEST\r\n  }\r\n}\r\n\r\nexport const togglePlayPause = () => {\r\n  return (dispatch) => {\r\n    dispatch(togglePlayPauseRequest());\r\n    socket.emit(events.TOGGLE_PLAY_PAUSE);\r\n  }\r\n}\r\n\r\nexport const nextTrack = () => {\r\n  return (dispatch) => {\r\n    dispatch(nextTrackRequest());\r\n    socket.emit(events.NEXT_TRACK_REQUEST);\r\n  }\r\n}\r\n\r\nexport const previousTrack = () => {\r\n  return (dispatch) => {\r\n    dispatch(previousTrackRequest());\r\n    socket.emit(events.PREVIOUS_TRACK_REQUEST);\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { getSocket } from '../socket';\r\nimport events from '../events';\r\nimport { \r\n  playStateResponse, \r\n  playStateChanged, \r\n  togglePlayPause,\r\n  nextTrack,\r\n  previousTrack\r\n} from '../redux/playState/playStateActions';\r\n\r\nconst socket = getSocket();\r\n\r\nclass PlayerControlsContainer extends Component  {\r\nconstructor(props){\r\n  super(props);\r\n\r\n  this.onPlayStateChanged = this.onPlayStateChanged.bind(this);\r\n  this.onPlayStateResponse = this.onPlayStateResponse.bind(this);\r\n  this.togglePlayPause = this.togglePlayPause.bind(this);\r\n  this.nextTrack = this.nextTrack.bind(this);\r\n  this.previousTrack = this.previousTrack.bind(this);\r\n\r\n\r\n  socket.on(events.PLAY_STATE_RESPONSE, this.onPlayStateResponse);\r\n  socket.on(events.PLAY_STATE_CHANGED, this.onPlayStateChanged);\r\n  \r\n  this.requestPlayState();\r\n\r\n}\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"player-controls\">\r\n        <div>\r\n          <i className=\"fas fa-5x fa-chevron-circle-left clickable\" onClick={this.previousTrack}></i>\r\n          <i className={'fas fa-5x clickable ' + (this.props.playState == 'play' ? 'fa-pause' : 'fa-play')} onClick={this.togglePlayPause}></i>\r\n          <i className=\"fas fa-5x fa-chevron-circle-right clickable\" onClick={this.nextTrack}></i>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  requestPlayState(){\r\n    socket.emit(events.PLAY_STATE_REQUEST);\r\n  }\r\n\r\n  onPlayStateChanged(playState){\r\n    this.props.playStateChanged(playState);\r\n  }\r\n\r\n  onPlayStateResponse(playState){\r\n    this.props.playStateResponse(playState);\r\n  }\r\n\r\n  nextTrack = () => {\r\n    this.props.nextTrack();\r\n  }\r\n\r\n  previousTrack = () => {\r\n    this.props.previousTrack();\r\n  }\r\n\r\n  togglePlayPause = () => {\r\n    this.props.togglePlayPause();\r\n  }\r\n\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    playState: state.playState.playState\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    playStateResponse: (playState) => dispatch(playStateResponse(playState)),\r\n    playStateChanged: (playState) => dispatch(playStateChanged(playState)),\r\n    togglePlayPause: () => dispatch(togglePlayPause()),\r\n    nextTrack: () => dispatch(nextTrack()),\r\n    previousTrack: () => dispatch(previousTrack()),\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PlayerControlsContainer)","export const PLAY_STATE_REQUEST = 'PLAY_STATE_REQUEST';\r\nexport const PLAY_STATE_RESPONSE = 'PLAY_STATE_RESPONSE';\r\nexport const PLAY_STATE_CHANGED = 'PLAY_STATE_CHANGED';\r\nexport const TOGGLE_PLAY_PAUSE_REQUEST = 'TOGGLE_PLAY_PAUSE_REQUEST';\r\nexport const NEXT_TRACK_REQUEST = 'NEXT_TRACK_REQUEST';\r\nexport const PREVIOUS_TRACK_REQUEST = 'PREVIOUS_TRACK_REQUEST';\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { getSocket } from '../socket';\r\n\r\nconst socket = getSocket();\r\n\r\nexport class VolumeControlsContainer extends Component  {\r\n\r\n  constructor(props){\r\n    super(props);\r\n    \r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <div className=\"volume-controls\">\r\n        <i className=\"fas fa-3x fa-chevron-up clickable\" onClick={this.volumeUp}></i>\r\n        <div id=\"current-volume-level\" className=\"volume-text\"></div>\r\n        <i className=\"fas fa-3x fa-chevron-down clickable\" onClick={this.volumeDown}></i>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  volumeUp = () => {\r\n    alert('Volume Up');\r\n  }\r\n\r\n  volumeDown = () => {\r\n\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    \r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(VolumeControlsContainer)\r\n","import {\r\n  GET_GROUPS_REQUEST,\r\n  GET_GROUPS_RESPONSE,\r\n  SET_GROUP_VOLUME\r\n} from './groupTypes';\r\nimport events from '../../events';\r\n\r\nimport { getSocket } from '../../socket';\r\n\r\nconst socket = getSocket();\r\n\r\nexport const getGroupsRequest= () => {\r\n  return {\r\n    type: GET_GROUPS_REQUEST\r\n  }\r\n}\r\n\r\nexport const setGroupVolumeRequest= () => {\r\n  return {\r\n    type: SET_GROUP_VOLUME\r\n  }\r\n}\r\n\r\nexport const getGroupsResponse = (groups) => {\r\n  return {\r\n    type: GET_GROUPS_RESPONSE,\r\n    payload: groups\r\n  }\r\n}\r\n\r\nexport const getGroups = () => {\r\n  return (dispatch) => {\r\n    dispatch(getGroupsRequest());\r\n    socket.emit(events.GET_GROUPS_REQUEST);\r\n  }\r\n}\r\n\r\nexport const setGroupVolume = (groupId, level) => {\r\n  return (dispatch) => {\r\n    dispatch(setGroupVolumeRequest());\r\n    socket.emit(events.SET_GROUP_VOLUME, groupId, level)\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport VolumeSlider from './VolumeSlider';\r\nimport { setGroupVolume } from  '../redux/group/groupActions';\r\n\r\nexport class GroupList extends Component {\r\n  constructor(props){\r\n    super(props);\r\n  }\r\n\r\n  componentDidUpdate(){\r\n    console.log('GroupList Updated');\r\n  }\r\n\r\n  render(){\r\n    return !this.props.groups.length ? <div>Searching for Groups...</div> : (\r\n      <div>\r\n        {this.props.groups.sort((a, b) => a.name > b.name ? 1 : -1).map((group) => {\r\n          return (\r\n            <div key={group.gid}>\r\n              <p>{group.name}</p>\r\n              <VolumeSlider currentVolume={group.volume} volumeChanged={(level) => this.onGroupVolumeChanged(group.gid, level)}></VolumeSlider> \r\n            </div>\r\n            )})\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n\r\n  onGroupVolumeChanged(groupId, level){\r\n    this.props.setGroupVolume(groupId, level);\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    setGroupVolume: (groupId, level) => dispatch(setGroupVolume(groupId, level))\r\n  }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(GroupList);","export const GET_GROUPS_REQUEST = 'GET_GROUPS_REQUEST';\r\nexport const GET_GROUPS_RESPONSE = 'GET_GROUPS_RESPONSE';\r\nexport const SET_GROUP_VOLUME = 'SET_GROUP_VOLUME';\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { getGroups, getGroupsResponse } from '../redux/group/groupActions';\r\nimport { getSocket } from '../socket';\r\nimport GroupList from './GroupList';\r\nimport events from '../events';\r\n\r\nconst socket = getSocket();\r\n\r\nclass GroupListContainer extends Component {\r\n  constructor(props){\r\n    super(props);\r\n\r\n    this.onGroupsReceived = this.onGroupsReceived.bind(this);\r\n    this.onGroupVolumeChanged = this.onGroupVolumeChanged.bind(this);\r\n    \r\n    socket.on(events.GET_GROUPS_RESPONSE, this.onGroupsReceived);\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.props.getGroups();\r\n  }\r\n\r\n  render() {\r\n    return <GroupList groups={this.props.groups}></GroupList>\r\n  }\r\n\r\n  onGroupsReceived = (newDeviceList) => {\r\n    this.props.getGroupsResponse(newDeviceList);\r\n  }\r\n\r\n  onGroupVolumeChanged(playerId, level) {\r\n    this.props.groupVolumeChanged(playerId, level);\r\n  }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    groups: state.groups\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  \r\n  return {\r\n    getGroups: () => dispatch(getGroups()),\r\n    getGroupsResponse: (groups) => dispatch(getGroupsResponse(groups))\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GroupListContainer);","import React, { Component } from 'react';\r\nimport PlayerListContainer from './PlayerListContainer';\r\nimport SongDetailsContainer from './SongDetailsContainer';\r\nimport PlayerControlsContainer from './PlayerControlsContainer';\r\nimport VolumeControlsContainer from './VolumeControlsContainer';\r\nimport GroupListContainer from './GroupListContainer';\r\n\r\nexport class LeftPaneComponent extends Component  {\r\n  render() {\r\n    return (\r\n      <div className=\"left-pane\">\r\n        <GroupListContainer></GroupListContainer>\r\n        <PlayerListContainer></PlayerListContainer>\r\n        <SongDetailsContainer></SongDetailsContainer>\r\n        <div className=\"bottom-section\">\r\n          <div className=\"bottom-controls\">\r\n            <PlayerControlsContainer></PlayerControlsContainer>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nclass AlbumArtContainer extends Component {\r\n\r\n  constructor(props){\r\n    super(props);\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <div className=\"image-container\">\r\n        <img id=\"track-img\" src={this.props.albumArtUrl}/>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    albumArtUrl: state.track.nowPlaying.image_url\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(AlbumArtContainer);","import React, { Component } from 'react';\r\nimport AlbumArtContainer from './AlbumArtContainer';\r\n\r\nexport class RightPaneComponent extends Component  {\r\n  render() {\r\n    return (\r\n      <div className=\"right-pane\">\r\n        <AlbumArtContainer></AlbumArtContainer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { getSocket } from '../socket';\r\nimport events from '../events';\r\nimport { songProgressUpdate } from '../redux/progress/progressActions';\r\nimport { VolumeControlsContainer } from './VolumeControlsContainer';\r\n\r\nconst socket = getSocket();\r\n\r\nclass SongProgressContainer extends Component  {\r\n\r\n  constructor(props){\r\n    super(props);\r\n    this.onSongProgressUpdated = this.onSongProgressUpdated.bind(this);\r\n    this.startProgressBar = this.startProgressBar.bind(this);\r\n    this.stopProgressBar = this.stopProgressBar.bind(this);\r\n\r\n    this.state = {\r\n      songPosition: undefined\r\n    }\r\n    socket.on(events.PROGRESS_UPDATE, this.onSongProgressUpdated);\r\n  }\r\n\r\n  static lastRefreshed;\r\n  static lastAccurateUpdate;\r\n\r\n  static getDerivedStateFromProps(props, prevState){\r\n    if(SongProgressContainer.lastRefreshed != SongProgressContainer.lastAccurateUpdate){\r\n      SongProgressContainer.lastAccurateUpdate = SongProgressContainer.lastRefreshed;\r\n      return { songPosition: props.progress.cur_pos }\r\n    }\r\n    else{\r\n      return { songPosition: prevState.songPosition };\r\n    }\r\n    \r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"progress-container\">\r\n        {this.state.songPosition}\r\n        <progress id=\"song-progress\" value={this.state.songPosition} max={this.props.progress.duration}></progress>\r\n        {this.props.progress.duration}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  componentDidUpdate(){\r\n    if(this.props.playState == 'play' && !this.isPlaying) {\r\n      this.startProgressBar();\r\n    }\r\n    else if(this.props.playState != 'play' && this.isPlaying) {\r\n      this.stopProgressBar();\r\n    }\r\n  }\r\n\r\n  stopProgressBar(){\r\n    clearInterval(this.intervalSubscription);\r\n    this.isPlaying = false;\r\n  }\r\n\r\n  startProgressBar(){\r\n    const me = this;\r\n    this.isPlaying = true;\r\n    this.intervalSubscription = setInterval(() => {\r\n      if(me.state.songPosition){\r\n        me.setState({songPosition: me.state.songPosition + 100})\r\n      }\r\n    }, 100);\r\n  }\r\n\r\n  onSongProgressUpdated(event){\r\n    SongProgressContainer.lastRefreshed = new Date();\r\n    console.log(event);\r\n    this.props.updateProgress(event);\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    progress: state.progress.progress,\r\n    playState: state.playState.playState\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    updateProgress: (progress) => dispatch(songProgressUpdate(progress))\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SongProgressContainer)","import { SONG_PROGRESS_UPDATE } from './progressTypes';\r\n\r\nexport const songProgressUpdate = (progress) => {\r\n  return {\r\n    type: SONG_PROGRESS_UPDATE,\r\n    payload: progress\r\n  }\r\n}","export const SONG_PROGRESS_UPDATE = 'SONG_PROGRESS_UPDATE';\r\n","import React from 'react';\r\nimport { LeftPaneComponent } from './components/LeftPane';\r\nimport { RightPaneComponent } from './components/RightPane';\r\nimport SongProgressContainer from './components/SongProgressContainer';\r\n\r\nfunction AppComponent() {\r\n\r\n  return  (\r\n    <div className=\"container\">\r\n      <LeftPaneComponent></LeftPaneComponent>\r\n      <RightPaneComponent></RightPaneComponent>\r\n      <SongProgressContainer></SongProgressContainer>\r\n    </div>\r\n\r\n    )\r\n}\r\n\r\nexport default AppComponent;","import { GET_PLAYERS_REQUEST, GET_PLAYERS_RESPONSE, PLAYER_VOLUME_CHANGED } from \"./playerTypes\";\r\n\r\nconst initialState = [\r\n\r\n];\r\n\r\nexport const playerReducers = (state = initialState, action) => {\r\n  switch(action.type){\r\n    case GET_PLAYERS_REQUEST:\r\n      return {\r\n        ...state\r\n      };\r\n    case GET_PLAYERS_RESPONSE:\r\n      return [\r\n        ...\r\n        action.payload\r\n      ]\r\n    case PLAYER_VOLUME_CHANGED:\r\n      const player = state.find((player) => player.pid === action.payload.playerId);\r\n      state.splice(state.indexOf(player), 1);\r\n\r\n      player.volume = action.payload.level;\r\n      return [\r\n        ...state, \r\n        player\r\n      ].sort((a, b) => a.name > b.name ? 1 : -1);\r\n   \r\n    default:\r\n      return state;\r\n  }\r\n}","import { GET_NOW_PLAYING_RESPONSE } from \"./trackTypes\";\r\n\r\n\r\nconst initialState = {\r\n  nowPlaying: {}\r\n};\r\n\r\nexport const trackReducers = (state = initialState, action) => {\r\n  switch(action.type){\r\n    case GET_NOW_PLAYING_RESPONSE:\r\n      return {\r\n        ...state,\r\n        nowPlaying: action.payload\r\n      };\r\n\r\n      default: return state;\r\n  }\r\n}","import { SONG_PROGRESS_UPDATE } from './progressTypes';\r\n\r\nconst initialState = {\r\n  progress: {}\r\n};\r\n\r\nexport const progressReducers = (state = initialState, action) => {\r\n  switch(action.type){\r\n    case SONG_PROGRESS_UPDATE:\r\n      return {\r\n        ...state,\r\n        progress: action.payload\r\n      };\r\n \r\n    default: \r\n      return state;\r\n  }\r\n}","import { \r\n  PLAY_STATE_RESPONSE, \r\n  PLAY_STATE_CHANGED\r\n} from './playStateTypes';\r\n\r\nconst initialState = {\r\n  playState: undefined\r\n};\r\n\r\nexport const playStateReducers = (state = initialState, action) => {\r\n  switch(action.type){\r\n    case PLAY_STATE_RESPONSE:\r\n    case PLAY_STATE_CHANGED:\r\n      return {\r\n        ...state,\r\n        playState: action.payload\r\n      };\r\n\r\n    default: \r\n      return state;\r\n  }\r\n}","import { GET_GROUPS_REQUEST, GET_GROUPS_RESPONSE } from \"./groupTypes\";\r\n\r\n\r\nconst initialState = [];\r\n\r\nexport const groupReducers = (state = initialState, action) => {\r\n  switch (action.type){\r\n    case GET_GROUPS_RESPONSE:\r\n      return [\r\n        ...\r\n        action.payload\r\n      ]\r\n    default:\r\n      return state;\r\n  }\r\n}","import { combineReducers } from 'redux';\r\nimport { playerReducers } from './player/playerReducers';\r\nimport { trackReducers } from './track/trackReducers';\r\nimport { progressReducers } from './progress/progressReducers';\r\nimport { playStateReducers } from './playState/playStateReducers';\r\nimport { groupReducers } from './group/groupReducers';\r\n\r\nconst rootReducer = combineReducers({\r\n  players: playerReducers,\r\n  track: trackReducers,\r\n  progress: progressReducers,\r\n  playState: playStateReducers,\r\n  groups: groupReducers\r\n});\r\n\r\nexport default rootReducer;","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport logger from 'redux-logger';\r\nimport rootReducer from './rootReducer';\r\n\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(logger, thunk));\r\n\r\nexport default store;","import React from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './index.css';\r\nimport store from './redux/store';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n","module.exports = {\r\n  GET_PLAYERS_REQUEST: 'GET_PLAYERS_REQUEST',\r\n  GET_PLAYERS_RESPONSE: 'GET_PLAYERS_RESPONSE',\r\n  NEW_DEVICE_DISCOVERED: 'NEW_DEVICE_DISCOVERED',\r\n  GET_PLAYERS: 'GET_PLAYERS',\r\n  SUCCESSFUL_CONNECTION: 'SUCCESSFUL_CONNECTION',\r\n  GET_NOW_PLAYING: 'GET_NOW_PLAYING',\r\n  CURRENT_TRACK_DETAILS: 'CURRENT_TRACK_DETAILS',\r\n  TRACK_CHANGED: 'TRACK_CHANGED',\r\n  PROGRESS_UPDATE: 'PROGRESS_UPDATE',\r\n  PLAY_STATE_CHANGED: 'PLAY_STATE_CHANGED',\r\n  PLAY_STATE_REQUEST: 'PLAY_STATE_REQUEST',\r\n  PLAY_STATE_RESPONSE: 'PLAY_STATE_RESPONSE',\r\n  TOGGLE_PLAY_PAUSE: 'TOGGLE_PLAY_PAUSE',\r\n  NEXT_TRACK_REQUEST: 'NEXT_TRACK_REQUEST',\r\n  PREVIOUS_TRACK_REQUEST: 'PREVIOUS_TRACK_REQUEST',\r\n  GET_VOLUME: 'GET_VOLUME',\r\n  SET_VOLUME: 'SET_VOLUME',\r\n  PLAYER_VOLUME_CHANGED: 'PLAYER_VOLUME_CHANGED',\r\n  GET_GROUPS_REQUEST: 'GET_GROUPS_REQUEST',\r\n  GET_GROUPS_RESPONSE: 'GET_GROUPS_RESPONSE',\r\n  SET_GROUP_VOLUME: 'SET_GROUP_VOLUME'\r\n};"],"sourceRoot":""}